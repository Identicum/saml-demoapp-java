#  If 'strict' is True, then the Java Toolkit will reject unsigned or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  false

# Enable debug mode (to print errors)
onelogin.saml2.debug =  true

#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = http://saml-demoapp-java.identicum.com/saml-demoapp-java/

# Specifies info about where and how the <AuthnResponse> message MUST be returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = http://saml-demoapp-java.identicum.com/saml-demoapp-java/acs.jsp

# SAML protocol binding to be used when returning the <Response> message.  Onelogin Toolkit supports for this endpoint the HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = http://saml-demoapp-java.identicum.com/saml-demoapp-java/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest> message.  Onelogin Toolkit supports for this endpoint the HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at the certs folder. But we can also provide them with the following parameters
# onelogin.saml2.sp.x509cert = MIIDUDCCAjgCCQDVcaSH++kMHjANBgkqhkiG9w0BAQsFADBqMQswCQYDVQQGEwJBUjELMAkGA1UECAwCQkExDTALBgNVBAcMBENBQkExEjAQBgNVBAoMCUlkZW50aWN1bTESMBAGA1UECwwJSWRlbnRpY3VtMRcwFQYDVQQDDA5zYW1sLWRlbW8tYXBwMjAeFw0xODA2MjgyMTU1NTZaFw0xOTA2MjgyMTU1NTZaMGoxCzAJBgNVBAYTAkFSMQswCQYDVQQIDAJCQTENMAsGA1UEBwwEQ0FCQTESMBAGA1UECgwJSWRlbnRpY3VtMRIwEAYDVQQLDAlJZGVudGljdW0xFzAVBgNVBAMMDnNhbWwtZGVtby1hcHAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwh+jMXvNjDJYlG05mgc+a4Nucc5fuX1wqSRIeFabpRjiwlY2bGnz3XhHAvMAMUYytG8e9S/qvSPWQUWfmv+IJ32boqZ3SFO4Hkh1AYDBRF61jawlhfaUFLiiQKnhiTUQJWzObhFIFjvBVLwkO76Hm3mdAtf84uqMu9N7xWVboEgzE8qwHcdt7l6aCT7aQ7ApvioJXEUy8+8LSw1ZapaZlE0PM/NRd19Hb3GdBBYdEWwmrJj77P2yZMJf+no03F+e+m8NRbZLMxLkpSgqbIBU7J9n2y58h7454ixyLIoRxRyfew+OR2zHyKYOE0iPcYV5fMJ85mAwI8RBMuFUtOjUdwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQA9/x/XBLSSUsMj6bQn1AJvDRTt7AaxBuodw03RPlPggBZX9NK0q0JCwoCcZIc31/Lp+zBFQwG5Xt7rf70HfxomopZ3akKddT6DIKGKtnK6KPqOaCok7ixgZClZ2WM08aaoEk+2GBVTUnyQ7beZ8yzZ+lnJ8XSVjn2HNMqfYF1MLL/T8omr+4Mq8V+1yEJCRfXJTbW+Qj+7z0EcqhkjuF2hHQ8eLfqMnwLP/4Gii4CgcowheKai4Z4/no62/pgZxHWlzAcbdc/Dl9KYTRxJHmA8ki8OntoDWmx0COf4uUlZV94j+6tFHFFSFFu+Zjnypa314KvLJnUapX+z9hUjSQvz

# Requires Format PKCS#8   BEGIN PRIVATE KEY
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
# onelogin.saml2.sp.privatekey = MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDCH6Mxe82MMliUbTmaBz5rg25xzl+5fXCpJEh4VpulGOLCVjZsafPdeEcC8wAxRjK0bx71L+q9I9ZBRZ+a/4gnfZuipndIU7geSHUBgMFEXrWNrCWF9pQUuKJAqeGJNRAlbM5uEUgWO8FUvCQ7voebeZ0C1/zi6oy703vFZVugSDMTyrAdx23uXpoJPtpDsCm+KglcRTLz7wtLDVlqlpmUTQ8z81F3X0dvcZ0EFh0RbCasmPvs/bJkwl/6ejTcX576bw1FtkszEuSlKCpsgFTsn2fbLnyHvjniLHIsihHFHJ97D45HbMfIpg4TSI9xhXl8wnzmYDAjxEEy4VS06NR3AgMBAAECggEBALL5BDZtE/b7u9ssUH0HzK7HAB6AzJRxaFspDn+UKe+u3/GYFpkhnipD6AR6EWVceQcNpBcd1GgJEFIhZKM8kEUIc2Mj4rmWJhwVZXq7QHROdUhmvDmkOqZYC49ekIc1mutGQ5QK7tFAyl/bDfTfFptrJi0nAQocgR/yPRyi9DTygDYQWISXiyMe8Nc0JVaRQSpfjkjePXNOTgGgGKLuncH7EyDcIkvTGiRb2UV7VqwKEYRZIVDxq0kOMMhCW/6uBYZI0QUMABb6VgUucJcWFHVWsKBKUNtu/X601eCy5KELx2t/WQBmqoQ55+mQH7uljXqGSyIlddpCwnVV8YkrrjECgYEA6uKuwTgYz3DKQyLrW20cA637v0GSls7Ce7T0g+ODBDVui/Hi+L23/6Sts8C0TDzmlvNYwK1D0n/lZ2qJFi7eussspKZoXcbsHZUNSw4xqNUM0u/FhqqRqflPd5le43rC3f03IeYjbZRNlqIOhfv790UCdL/j8Fo1uogi3XDV6FsCgYEA05LrSHO+d1SiUBPm9imNDqs2lRyre3BCyCyZPEjFtPmfGVyxAx2Ag2PeZtJFqCir1tMx2ln5OSc7T0n+rT5yV1Dhue/Tc6RsenIIsoTX0CZ5F8Z6O8X5P++QhJAqa8jab5zqU4TnLiVPtm4ILjPEXMn5TqiN/kCti5tUHefZXxUCgYBzlof/J9b1xoCSl02RGVmO6gCYNvGnaypD7GHjwYNI/+5dyfQzClHQ6T5d1fgkCFhFco17jAhzP2MqCEBb/Ua4T6GxiP6VH340dJQtGlgPyIBeEYZ35dp29exIY95RPalFywVlljZbB39DII7bGoz9OyWhRIksT4hfOf1GUe/CPwKBgQC04Q1PwsxaPrwJlApH95wFp3ChqIIepQojEqXq+Rg1sZdIWotm62j8a3wvEaPFsQfAQIyFbZh5OUYmck9OE24zog1pJlTzr+WiBS3UWWgcJ1gtcFz+DzIZbBl0i8AIqA2/kDpxLtVqCTIN+CH8RfuhjHccvVOvw+Ha0e/nJVkcRQKBgASz203pDj9Wx3mQUWrMoAKDmNbuoDVCWj0/Ep1yC76mSD9q+djFzT4LSDWYz7B0bVfAbVJUA5fuJJ4d40v6kL3f9EcV3wnHMcAPS7QyxGq3cnB+D4+B8jfTs4fQ+UuLIAzsKJuFhhFcB2bxOdiiriKJ8w6zzugVXZMKGDkDWAaG

# Identity Provider Data that we want connect with our SP

# Identifier of the IdP entity  (must be a URI)
# MicroFocus Access Manager:  https://identity_server_hostname/nidp/saml2/metadata
onelogin.saml2.idp.entityid = {IDP_METADATA_URL}

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
# MicroFocus Access Manager:  https://identity_server_hostname/
onelogin.saml2.idp.single_sign_on_service.url = {IDP_SSO_ENDPOINT_URL}

# SAML protocol binding to be used when returning the <Response> message.  Onelogin Toolkit supports for this endpoint the HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.  URL Location of the IdP where the SP will send the SLO Request
# MicroFocus Access Manager:  https://identity_server_hostname/nidp/saml2/slo
onelogin.saml2.idp.single_logout_service.url = {IDP_SingleLogout_ENDPOINT_URL}

# Optional SLO Response endpoint info of the IdP.  URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
# MicroFocus Access Manager:  https://identity_server_hostname/nidp/saml2/slo_return
onelogin.saml2.idp.single_logout_service.response.url = {IDP_SingleLogoutReturn_ENDPOINT_URL}

# SAML protocol binding to be used when returning the <Response> message.  Onelogin Toolkit supports for this endpoint the HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = {Base64_encoded_certificate}

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint =
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false

# Indicates whether the <samlp:logoutRequest> messages sent by this SP will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Sign the Metadata
# Empty means no signature, or comma separate the keyFileName and the certFileName
onelogin.saml2.security.want_messages_signed =

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key)
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
# onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
# onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
#  onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1
